// Code generated by MockGen. DO NOT EDIT.
// Source: zk-snarks.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "github.com/consensys/quorum-hashicorp-vault-plugin/src/vault/entities"
	usecases "github.com/consensys/quorum-hashicorp-vault-plugin/src/vault/use-cases"
	gomock "github.com/golang/mock/gomock"
	logical "github.com/hashicorp/vault/sdk/logical"
	reflect "reflect"
)

// MockZksUseCases is a mock of ZksUseCases interface
type MockZksUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockZksUseCasesMockRecorder
}

// MockZksUseCasesMockRecorder is the mock recorder for MockZksUseCases
type MockZksUseCasesMockRecorder struct {
	mock *MockZksUseCases
}

// NewMockZksUseCases creates a new mock instance
func NewMockZksUseCases(ctrl *gomock.Controller) *MockZksUseCases {
	mock := &MockZksUseCases{ctrl: ctrl}
	mock.recorder = &MockZksUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZksUseCases) EXPECT() *MockZksUseCasesMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method
func (m *MockZksUseCases) CreateAccount() usecases.CreateZksAccountUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount")
	ret0, _ := ret[0].(usecases.CreateZksAccountUseCase)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockZksUseCasesMockRecorder) CreateAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockZksUseCases)(nil).CreateAccount))
}

// GetAccount mocks base method
func (m *MockZksUseCases) GetAccount() usecases.GetZksAccountUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount")
	ret0, _ := ret[0].(usecases.GetZksAccountUseCase)
	return ret0
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockZksUseCasesMockRecorder) GetAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockZksUseCases)(nil).GetAccount))
}

// ListAccounts mocks base method
func (m *MockZksUseCases) ListAccounts() usecases.ListZksAccountsUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts")
	ret0, _ := ret[0].(usecases.ListZksAccountsUseCase)
	return ret0
}

// ListAccounts indicates an expected call of ListAccounts
func (mr *MockZksUseCasesMockRecorder) ListAccounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockZksUseCases)(nil).ListAccounts))
}

// ListNamespaces mocks base method
func (m *MockZksUseCases) ListNamespaces() usecases.ListZksNamespacesUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespaces")
	ret0, _ := ret[0].(usecases.ListZksNamespacesUseCase)
	return ret0
}

// ListNamespaces indicates an expected call of ListNamespaces
func (mr *MockZksUseCasesMockRecorder) ListNamespaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespaces", reflect.TypeOf((*MockZksUseCases)(nil).ListNamespaces))
}

// SignPayload mocks base method
func (m *MockZksUseCases) SignPayload() usecases.ZksSignUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignPayload")
	ret0, _ := ret[0].(usecases.ZksSignUseCase)
	return ret0
}

// SignPayload indicates an expected call of SignPayload
func (mr *MockZksUseCasesMockRecorder) SignPayload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignPayload", reflect.TypeOf((*MockZksUseCases)(nil).SignPayload))
}

// MockCreateZksAccountUseCase is a mock of CreateZksAccountUseCase interface
type MockCreateZksAccountUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateZksAccountUseCaseMockRecorder
}

// MockCreateZksAccountUseCaseMockRecorder is the mock recorder for MockCreateZksAccountUseCase
type MockCreateZksAccountUseCaseMockRecorder struct {
	mock *MockCreateZksAccountUseCase
}

// NewMockCreateZksAccountUseCase creates a new mock instance
func NewMockCreateZksAccountUseCase(ctrl *gomock.Controller) *MockCreateZksAccountUseCase {
	mock := &MockCreateZksAccountUseCase{ctrl: ctrl}
	mock.recorder = &MockCreateZksAccountUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateZksAccountUseCase) EXPECT() *MockCreateZksAccountUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockCreateZksAccountUseCase) Execute(ctx context.Context, namespace string) (*entities.ZksAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, namespace)
	ret0, _ := ret[0].(*entities.ZksAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockCreateZksAccountUseCaseMockRecorder) Execute(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateZksAccountUseCase)(nil).Execute), ctx, namespace)
}

// WithStorage mocks base method
func (m *MockCreateZksAccountUseCase) WithStorage(storage logical.Storage) usecases.CreateZksAccountUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStorage", storage)
	ret0, _ := ret[0].(usecases.CreateZksAccountUseCase)
	return ret0
}

// WithStorage indicates an expected call of WithStorage
func (mr *MockCreateZksAccountUseCaseMockRecorder) WithStorage(storage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStorage", reflect.TypeOf((*MockCreateZksAccountUseCase)(nil).WithStorage), storage)
}

// MockGetZksAccountUseCase is a mock of GetZksAccountUseCase interface
type MockGetZksAccountUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetZksAccountUseCaseMockRecorder
}

// MockGetZksAccountUseCaseMockRecorder is the mock recorder for MockGetZksAccountUseCase
type MockGetZksAccountUseCaseMockRecorder struct {
	mock *MockGetZksAccountUseCase
}

// NewMockGetZksAccountUseCase creates a new mock instance
func NewMockGetZksAccountUseCase(ctrl *gomock.Controller) *MockGetZksAccountUseCase {
	mock := &MockGetZksAccountUseCase{ctrl: ctrl}
	mock.recorder = &MockGetZksAccountUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetZksAccountUseCase) EXPECT() *MockGetZksAccountUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockGetZksAccountUseCase) Execute(ctx context.Context, pubKey, namespace string) (*entities.ZksAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, pubKey, namespace)
	ret0, _ := ret[0].(*entities.ZksAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockGetZksAccountUseCaseMockRecorder) Execute(ctx, pubKey, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetZksAccountUseCase)(nil).Execute), ctx, pubKey, namespace)
}

// WithStorage mocks base method
func (m *MockGetZksAccountUseCase) WithStorage(storage logical.Storage) usecases.GetZksAccountUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStorage", storage)
	ret0, _ := ret[0].(usecases.GetZksAccountUseCase)
	return ret0
}

// WithStorage indicates an expected call of WithStorage
func (mr *MockGetZksAccountUseCaseMockRecorder) WithStorage(storage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStorage", reflect.TypeOf((*MockGetZksAccountUseCase)(nil).WithStorage), storage)
}

// MockListZksAccountsUseCase is a mock of ListZksAccountsUseCase interface
type MockListZksAccountsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockListZksAccountsUseCaseMockRecorder
}

// MockListZksAccountsUseCaseMockRecorder is the mock recorder for MockListZksAccountsUseCase
type MockListZksAccountsUseCaseMockRecorder struct {
	mock *MockListZksAccountsUseCase
}

// NewMockListZksAccountsUseCase creates a new mock instance
func NewMockListZksAccountsUseCase(ctrl *gomock.Controller) *MockListZksAccountsUseCase {
	mock := &MockListZksAccountsUseCase{ctrl: ctrl}
	mock.recorder = &MockListZksAccountsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockListZksAccountsUseCase) EXPECT() *MockListZksAccountsUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockListZksAccountsUseCase) Execute(ctx context.Context, namespace string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, namespace)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockListZksAccountsUseCaseMockRecorder) Execute(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockListZksAccountsUseCase)(nil).Execute), ctx, namespace)
}

// WithStorage mocks base method
func (m *MockListZksAccountsUseCase) WithStorage(storage logical.Storage) usecases.ListZksAccountsUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStorage", storage)
	ret0, _ := ret[0].(usecases.ListZksAccountsUseCase)
	return ret0
}

// WithStorage indicates an expected call of WithStorage
func (mr *MockListZksAccountsUseCaseMockRecorder) WithStorage(storage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStorage", reflect.TypeOf((*MockListZksAccountsUseCase)(nil).WithStorage), storage)
}

// MockZksSignUseCase is a mock of ZksSignUseCase interface
type MockZksSignUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockZksSignUseCaseMockRecorder
}

// MockZksSignUseCaseMockRecorder is the mock recorder for MockZksSignUseCase
type MockZksSignUseCaseMockRecorder struct {
	mock *MockZksSignUseCase
}

// NewMockZksSignUseCase creates a new mock instance
func NewMockZksSignUseCase(ctrl *gomock.Controller) *MockZksSignUseCase {
	mock := &MockZksSignUseCase{ctrl: ctrl}
	mock.recorder = &MockZksSignUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZksSignUseCase) EXPECT() *MockZksSignUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockZksSignUseCase) Execute(ctx context.Context, pubKey, namespace, data string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, pubKey, namespace, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockZksSignUseCaseMockRecorder) Execute(ctx, pubKey, namespace, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockZksSignUseCase)(nil).Execute), ctx, pubKey, namespace, data)
}

// WithStorage mocks base method
func (m *MockZksSignUseCase) WithStorage(storage logical.Storage) usecases.ZksSignUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStorage", storage)
	ret0, _ := ret[0].(usecases.ZksSignUseCase)
	return ret0
}

// WithStorage indicates an expected call of WithStorage
func (mr *MockZksSignUseCaseMockRecorder) WithStorage(storage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStorage", reflect.TypeOf((*MockZksSignUseCase)(nil).WithStorage), storage)
}

// MockListZksNamespacesUseCase is a mock of ListZksNamespacesUseCase interface
type MockListZksNamespacesUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockListZksNamespacesUseCaseMockRecorder
}

// MockListZksNamespacesUseCaseMockRecorder is the mock recorder for MockListZksNamespacesUseCase
type MockListZksNamespacesUseCaseMockRecorder struct {
	mock *MockListZksNamespacesUseCase
}

// NewMockListZksNamespacesUseCase creates a new mock instance
func NewMockListZksNamespacesUseCase(ctrl *gomock.Controller) *MockListZksNamespacesUseCase {
	mock := &MockListZksNamespacesUseCase{ctrl: ctrl}
	mock.recorder = &MockListZksNamespacesUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockListZksNamespacesUseCase) EXPECT() *MockListZksNamespacesUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockListZksNamespacesUseCase) Execute(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockListZksNamespacesUseCaseMockRecorder) Execute(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockListZksNamespacesUseCase)(nil).Execute), ctx)
}

// WithStorage mocks base method
func (m *MockListZksNamespacesUseCase) WithStorage(storage logical.Storage) usecases.ListZksNamespacesUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStorage", storage)
	ret0, _ := ret[0].(usecases.ListZksNamespacesUseCase)
	return ret0
}

// WithStorage indicates an expected call of WithStorage
func (mr *MockListZksNamespacesUseCaseMockRecorder) WithStorage(storage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStorage", reflect.TypeOf((*MockListZksNamespacesUseCase)(nil).WithStorage), storage)
}
